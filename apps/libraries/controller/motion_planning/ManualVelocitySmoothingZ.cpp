/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

#include "ManualVelocitySmoothingZ.hpp"

#include <mathlib/mathlib.h>
#include <float.h>

void ManualVelocitySmoothingZ::reset(float accel, float vel, float pos)
{
	_trajectory.reset(accel, vel, pos);

	resetPositionLock();
}

void ManualVelocitySmoothingZ::resetPositionLock()
{
	_position_lock_active = false;
	_position_setpoint_locked = NAN;
}

void ManualVelocitySmoothingZ::update(float dt, float velocity_target)
{
	// Update state
	updateTrajectories(dt);

	// Set max accel/vel/jerk
	// Has to be done before _updateTrajDurations()
	updateTrajConstraints(velocity_target);

	// Lock or unlock position
	// Has to be done before _updateTrajDurations()
	checkPositionLock(velocity_target);

	// Update durations
	_trajectory.updateDurations(velocity_target);
}

void ManualVelocitySmoothingZ::updateTrajectories(float dt)
{
	_trajectory.updateTraj(dt);

	_state.j = _trajectory.getCurrentJerk();
	_state.a = _trajectory.getCurrentAcceleration();
	_state.v = _trajectory.getCurrentVelocity();
	_state.x = _trajectory.getCurrentPosition();
}

void ManualVelocitySmoothingZ::updateTrajConstraints(float velocity_target)
{
	if (velocity_target < 0.f) { // up
		_trajectory.setMaxAccel(_max_accel_up);
		_trajectory.setMaxVel(_max_vel_up);

	} else { // down
		_trajectory.setMaxAccel(_max_accel_down);
		_trajectory.setMaxVel(_max_vel_down);
	}
}

void ManualVelocitySmoothingZ::checkPositionLock(float velocity_target)
{
	/**
	 * During a position lock -> position unlock transition, we have to make sure that the velocity setpoint
	 * is continuous. We know that the output of the position loop (part of the velocity setpoint)
	 * will suddenly become null
	 * and only the feedforward (generated by this flight task) will remain.
	 * This is why the previous input of the velocity controller
	 * is used to set current velocity of the trajectory.
	 */
	if (fabsf(_state.v) < 0.1f &&
	    fabsf(_state.a) < .2f &&
	    fabsf(velocity_target) <= FLT_EPSILON) {
		// Lock position
		_position_lock_active = true;
		_position_setpoint_locked = _state.x;

	} else {
		// Unlock position
		if (_position_lock_active) {
			// Start the trajectory at the current velocity setpoint
			_trajectory.setCurrentVelocity(_velocity_setpoint_feedback);
			_state.v = _velocity_setpoint_feedback;
			resetPositionLock();
		}

		_trajectory.setCurrentPosition(_position_estimate);
	}
}
