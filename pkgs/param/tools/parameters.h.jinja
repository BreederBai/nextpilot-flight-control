{#- jinja syntax: http://jinja.pocoo.org/docs/2.9/templates/ -#}

#ifndef __PARAM_GLOBAL_AUTOGEN_H__
#define __PARAM_GLOBAL_AUTOGEN_H__

// DO NOT EDIT
// This file is autogenerated from *_params.toml

#include <math.h>
#include <stdint.h>
#include "param_common.h"

namespace nextpilot::global_params {

typedef struct param_data_s {
    param_value_t  value;
    param_status_t status;
} param_data_t;

#pragma pack(push, 4)
typedef struct param_info_s {
    const char         *name;
    const param_type_t  type;
    const param_value_t value;
    const param_flag_t  flag;
} param_info_t;
#pragma pack(pop)

// find param by name
param_t param_find(const char *name, bool mark_used);
// get param meta info
uint16_t     param_get_count();
const char  *param_get_name(uint16_t idx);
param_type_t param_get_type(uint16_t idx);
uint8_t      param_get_size(uint16_t idx);
param_flag_t param_get_flag(uint16_t idx);
int          param_get_default_value(uint16_t idx, void *val);

// get/set param value and status
int            param_get_value(param_t idx, void *val, bool mark_used);
int            param_set_value(param_t idx, const void *val, bool mark_saved, bool notify_changes);
param_status_t param_get_status(param_t idx);
int            param_set_status(param_t idx, param_status_t status);

/// Enum with all parameters
enum class params : uint16_t {
	{#- enums are guaranteed to start with 0 (if the value for the first is not
	   specified), and then incremented by 1 (the implementation depends on that!)  #}
{%- for param in params %}
	{{ param["name"] }} = {{ loop.index0 }},
{%- endfor %}
	MAX_COUNT
};

static constexpr param_info_s infos[] = {
{%- for param in params %}
	{.name = "{{ param["name"] }}",
	{%- if param["type"] == "float" -%}
		.type = PARAM_TYPE_FLOAT,.value = {{ "{" }}.f32 = {{ param["default"] }}{{ "}" }},
	{%- elif param["type"] == "int32" -%}
		.type = PARAM_TYPE_INT32,.value = {{ "{" }}.i32 = {{ param["default"] }}{{ "}" }},
	{%- endif -%}
	.flag = {.value = 0}},
{%- endfor %}
};

} // namespace nextpilot::global_params

#endif // __PARAM_GLOBAL_AUTOGEN_H__
