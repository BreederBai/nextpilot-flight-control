
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file PositionSetpoint.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus
#define POSITION_SETPOINT_SETPOINT_TYPE_POSITION 0
#define POSITION_SETPOINT_SETPOINT_TYPE_VELOCITY 1
#define POSITION_SETPOINT_SETPOINT_TYPE_LOITER 2
#define POSITION_SETPOINT_SETPOINT_TYPE_TAKEOFF 3
#define POSITION_SETPOINT_SETPOINT_TYPE_LAND 4
#define POSITION_SETPOINT_SETPOINT_TYPE_IDLE 5

#endif


#ifdef __cplusplus
struct __EXPORT position_setpoint_s {
#else
struct position_setpoint_s {
#endif
	uint64_t timestamp;
	double lat;
	double lon;
	float vx;
	float vy;
	float vz;
	float alt;
	float yaw;
	float yawspeed;
	float loiter_radius;
	float acceptance_radius;
	float cruising_speed;
	float cruising_throttle;
	bool valid;
	uint8_t type;
	bool yaw_valid;
	bool yawspeed_valid;
	bool loiter_direction_counter_clockwise;
	bool gliding_enabled;
	bool disable_weather_vane;
	uint8_t _padding0[1]; // required for logger


#ifdef __cplusplus
	static constexpr uint8_t SETPOINT_TYPE_POSITION = 0;
	static constexpr uint8_t SETPOINT_TYPE_VELOCITY = 1;
	static constexpr uint8_t SETPOINT_TYPE_LOITER = 2;
	static constexpr uint8_t SETPOINT_TYPE_TAKEOFF = 3;
	static constexpr uint8_t SETPOINT_TYPE_LAND = 4;
	static constexpr uint8_t SETPOINT_TYPE_IDLE = 5;

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using PositionSetpoint = position_setpoint_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(position_setpoint);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const position_setpoint_s& message);
#endif
