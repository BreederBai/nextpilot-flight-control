
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file VehicleOdometry.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus
#define VEHICLE_ODOMETRY_POSE_FRAME_UNKNOWN 0
#define VEHICLE_ODOMETRY_POSE_FRAME_NED 1
#define VEHICLE_ODOMETRY_POSE_FRAME_FRD 2
#define VEHICLE_ODOMETRY_VELOCITY_FRAME_UNKNOWN 0
#define VEHICLE_ODOMETRY_VELOCITY_FRAME_NED 1
#define VEHICLE_ODOMETRY_VELOCITY_FRAME_FRD 2
#define VEHICLE_ODOMETRY_VELOCITY_FRAME_BODY_FRD 3

#endif


#ifdef __cplusplus
struct __EXPORT vehicle_odometry_s {
#else
struct vehicle_odometry_s {
#endif
	uint64_t timestamp;
	uint64_t timestamp_sample;
	float position[3];
	float q[4];
	float velocity[3];
	float angular_velocity[3];
	float position_variance[3];
	float orientation_variance[3];
	float velocity_variance[3];
	uint8_t pose_frame;
	uint8_t velocity_frame;
	uint8_t reset_counter;
	int8_t quality;
	uint8_t _padding0[4]; // required for logger


#ifdef __cplusplus
	static constexpr uint8_t POSE_FRAME_UNKNOWN = 0;
	static constexpr uint8_t POSE_FRAME_NED = 1;
	static constexpr uint8_t POSE_FRAME_FRD = 2;
	static constexpr uint8_t VELOCITY_FRAME_UNKNOWN = 0;
	static constexpr uint8_t VELOCITY_FRAME_NED = 1;
	static constexpr uint8_t VELOCITY_FRAME_FRD = 2;
	static constexpr uint8_t VELOCITY_FRAME_BODY_FRD = 3;

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using VehicleOdometry = vehicle_odometry_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(vehicle_odometry);
ORB_DECLARE(vehicle_mocap_odometry);
ORB_DECLARE(vehicle_visual_odometry);
ORB_DECLARE(estimator_odometry);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const vehicle_odometry_s& message);
#endif
