
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file MissionResult.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus
#define MISSION_RESULT_MISSION_EXECUTION_MODE_NORMAL 0
#define MISSION_RESULT_MISSION_EXECUTION_MODE_REVERSE 1
#define MISSION_RESULT_MISSION_EXECUTION_MODE_FAST_FORWARD 2

#endif


#ifdef __cplusplus
struct __EXPORT mission_result_s {
#else
struct mission_result_s {
#endif
	uint64_t timestamp;
	uint32_t instance_count;
	int32_t seq_reached;
	uint16_t seq_current;
	uint16_t seq_total;
	uint16_t item_changed_index;
	uint16_t item_do_jump_remaining;
	bool valid;
	bool warning;
	bool finished;
	bool failure;
	bool item_do_jump_changed;
	uint8_t execution_mode;
	uint8_t _padding0[2]; // required for logger


#ifdef __cplusplus
	static constexpr uint8_t MISSION_EXECUTION_MODE_NORMAL = 0;
	static constexpr uint8_t MISSION_EXECUTION_MODE_REVERSE = 1;
	static constexpr uint8_t MISSION_EXECUTION_MODE_FAST_FORWARD = 2;

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using MissionResult = mission_result_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(mission_result);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const mission_result_s& message);
#endif
