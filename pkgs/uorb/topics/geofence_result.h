
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file D:\nextpilot\nextpilot-flight-control-public\msgs\uorb_msgs\GeofenceResult.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus
#define GEOFENCE_RESULT_GF_ACTION_NONE 0
#define GEOFENCE_RESULT_GF_ACTION_WARN 1
#define GEOFENCE_RESULT_GF_ACTION_LOITER 2
#define GEOFENCE_RESULT_GF_ACTION_RTL 3
#define GEOFENCE_RESULT_GF_ACTION_TERMINATE 4
#define GEOFENCE_RESULT_GF_ACTION_LAND 5

#endif


#ifdef __cplusplus
struct __EXPORT geofence_result_s {
#else
struct geofence_result_s {
#endif
	uint64_t timestamp;
	uint8_t geofence_violation_reason;
	bool primary_geofence_breached;
	uint8_t primary_geofence_action;
	bool home_required;
	uint8_t _padding0[4]; // required for logger


#ifdef __cplusplus
	static constexpr uint8_t GF_ACTION_NONE = 0;
	static constexpr uint8_t GF_ACTION_WARN = 1;
	static constexpr uint8_t GF_ACTION_LOITER = 2;
	static constexpr uint8_t GF_ACTION_RTL = 3;
	static constexpr uint8_t GF_ACTION_TERMINATE = 4;
	static constexpr uint8_t GF_ACTION_LAND = 5;

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using GeofenceResult = geofence_result_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(geofence_result);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const geofence_result_s& message);
#endif
