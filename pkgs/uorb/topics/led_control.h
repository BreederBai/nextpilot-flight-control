
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file LedControl.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus
#define LED_CONTROL_COLOR_OFF 0
#define LED_CONTROL_COLOR_RED 1
#define LED_CONTROL_COLOR_GREEN 2
#define LED_CONTROL_COLOR_BLUE 3
#define LED_CONTROL_COLOR_YELLOW 4
#define LED_CONTROL_COLOR_PURPLE 5
#define LED_CONTROL_COLOR_AMBER 6
#define LED_CONTROL_COLOR_CYAN 7
#define LED_CONTROL_COLOR_WHITE 8
#define LED_CONTROL_MODE_OFF 0
#define LED_CONTROL_MODE_ON 1
#define LED_CONTROL_MODE_DISABLED 2
#define LED_CONTROL_MODE_BLINK_SLOW 3
#define LED_CONTROL_MODE_BLINK_NORMAL 4
#define LED_CONTROL_MODE_BLINK_FAST 5
#define LED_CONTROL_MODE_BREATHE 6
#define LED_CONTROL_MODE_FLASH 7
#define LED_CONTROL_MAX_PRIORITY 2
#define LED_CONTROL_ORB_QUEUE_LENGTH 8

#endif


#ifdef __cplusplus
struct __EXPORT led_control_s {
#else
struct led_control_s {
#endif
	uint64_t timestamp;
	uint8_t led_mask;
	uint8_t color;
	uint8_t mode;
	uint8_t num_blinks;
	uint8_t priority;
	uint8_t _padding0[3]; // required for logger


#ifdef __cplusplus
	static constexpr uint8_t COLOR_OFF = 0;
	static constexpr uint8_t COLOR_RED = 1;
	static constexpr uint8_t COLOR_GREEN = 2;
	static constexpr uint8_t COLOR_BLUE = 3;
	static constexpr uint8_t COLOR_YELLOW = 4;
	static constexpr uint8_t COLOR_PURPLE = 5;
	static constexpr uint8_t COLOR_AMBER = 6;
	static constexpr uint8_t COLOR_CYAN = 7;
	static constexpr uint8_t COLOR_WHITE = 8;
	static constexpr uint8_t MODE_OFF = 0;
	static constexpr uint8_t MODE_ON = 1;
	static constexpr uint8_t MODE_DISABLED = 2;
	static constexpr uint8_t MODE_BLINK_SLOW = 3;
	static constexpr uint8_t MODE_BLINK_NORMAL = 4;
	static constexpr uint8_t MODE_BLINK_FAST = 5;
	static constexpr uint8_t MODE_BREATHE = 6;
	static constexpr uint8_t MODE_FLASH = 7;
	static constexpr uint8_t MAX_PRIORITY = 2;
	static constexpr uint8_t ORB_QUEUE_LENGTH = 8;

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using LedControl = led_control_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(led_control);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const led_control_s& message);
#endif
