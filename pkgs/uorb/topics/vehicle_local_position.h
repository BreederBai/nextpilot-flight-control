
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file VehicleLocalPosition.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus
#define VEHICLE_LOCAL_POSITION_DIST_BOTTOM_SENSOR_NONE 0
#define VEHICLE_LOCAL_POSITION_DIST_BOTTOM_SENSOR_RANGE 1
#define VEHICLE_LOCAL_POSITION_DIST_BOTTOM_SENSOR_FLOW 2

#endif


#ifdef __cplusplus
struct __EXPORT vehicle_local_position_s {
#else
struct vehicle_local_position_s {
#endif
	uint64_t timestamp;
	uint64_t timestamp_sample;
	uint64_t ref_timestamp;
	double ref_lat;
	double ref_lon;
	float x;
	float y;
	float z;
	float delta_xy[2];
	float delta_z;
	float vx;
	float vy;
	float vz;
	float z_deriv;
	float delta_vxy[2];
	float delta_vz;
	float ax;
	float ay;
	float az;
	float heading;
	float delta_heading;
	float ref_alt;
	float dist_bottom;
	float eph;
	float epv;
	float evh;
	float evv;
	float vxy_max;
	float vz_max;
	float hagl_min;
	float hagl_max;
	bool xy_valid;
	bool z_valid;
	bool v_xy_valid;
	bool v_z_valid;
	uint8_t xy_reset_counter;
	uint8_t z_reset_counter;
	uint8_t vxy_reset_counter;
	uint8_t vz_reset_counter;
	uint8_t heading_reset_counter;
	bool heading_good_for_control;
	bool xy_global;
	bool z_global;
	bool dist_bottom_valid;
	uint8_t dist_bottom_sensor_bitfield;
	bool dead_reckoning;
	uint8_t _padding0[1]; // required for logger


#ifdef __cplusplus
	static constexpr uint8_t DIST_BOTTOM_SENSOR_NONE = 0;
	static constexpr uint8_t DIST_BOTTOM_SENSOR_RANGE = 1;
	static constexpr uint8_t DIST_BOTTOM_SENSOR_FLOW = 2;

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using VehicleLocalPosition = vehicle_local_position_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(vehicle_local_position);
ORB_DECLARE(vehicle_local_position_groundtruth);
ORB_DECLARE(external_ins_local_position);
ORB_DECLARE(estimator_local_position);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const vehicle_local_position_s& message);
#endif
