
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file EstimatorAidSource3d.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus

#endif


#ifdef __cplusplus
struct __EXPORT estimator_aid_source3d_s {
#else
struct estimator_aid_source3d_s {
#endif
	uint64_t timestamp;
	uint64_t timestamp_sample;
	uint64_t time_last_fuse;
	uint32_t device_id;
	float observation[3];
	float observation_variance[3];
	float innovation[3];
	float innovation_variance[3];
	float test_ratio[3];
	uint8_t estimator_instance;
	bool fusion_enabled;
	bool innovation_rejected;
	bool fused;
	uint8_t _padding0[4]; // required for logger


#ifdef __cplusplus

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using EstimatorAidSource3d = estimator_aid_source3d_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(estimator_aid_src_ev_vel);
ORB_DECLARE(estimator_aid_src_gnss_vel);
ORB_DECLARE(estimator_aid_src_gravity);
ORB_DECLARE(estimator_aid_src_mag);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const estimator_aid_source3d_s& message);
#endif
