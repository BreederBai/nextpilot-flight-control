
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file AirspeedWind.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus
#define AIRSPEED_WIND_SOURCE_AS_BETA_ONLY 0
#define AIRSPEED_WIND_SOURCE_AS_SENSOR_1 1
#define AIRSPEED_WIND_SOURCE_AS_SENSOR_2 2
#define AIRSPEED_WIND_SOURCE_AS_SENSOR_3 3

#endif


#ifdef __cplusplus
struct __EXPORT airspeed_wind_s {
#else
struct airspeed_wind_s {
#endif
	uint64_t timestamp;
	uint64_t timestamp_sample;
	float windspeed_north;
	float windspeed_east;
	float variance_north;
	float variance_east;
	float tas_innov;
	float tas_innov_var;
	float tas_scale_raw;
	float tas_scale_raw_var;
	float tas_scale_validated;
	float beta_innov;
	float beta_innov_var;
	uint8_t source;
	uint8_t _padding0[3]; // required for logger


#ifdef __cplusplus
	static constexpr uint8_t SOURCE_AS_BETA_ONLY = 0;
	static constexpr uint8_t SOURCE_AS_SENSOR_1 = 1;
	static constexpr uint8_t SOURCE_AS_SENSOR_2 = 2;
	static constexpr uint8_t SOURCE_AS_SENSOR_3 = 3;

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using AirspeedWind = airspeed_wind_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(airspeed_wind);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const airspeed_wind_s& message);
#endif
