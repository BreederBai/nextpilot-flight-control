
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file LoggerStatus.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus
#define LOGGER_STATUS_LOGGER_TYPE_FULL 0
#define LOGGER_STATUS_LOGGER_TYPE_MISSION 1
#define LOGGER_STATUS_BACKEND_FILE 1
#define LOGGER_STATUS_BACKEND_MAVLINK 2
#define LOGGER_STATUS_BACKEND_ALL 3

#endif


#ifdef __cplusplus
struct __EXPORT logger_status_s {
#else
struct logger_status_s {
#endif
	uint64_t timestamp;
	float total_written_kb;
	float write_rate_kb_s;
	uint32_t dropouts;
	uint32_t message_gaps;
	uint32_t buffer_used_bytes;
	uint32_t buffer_size_bytes;
	uint8_t type;
	uint8_t backend;
	uint8_t num_messages;
	uint8_t _padding0[5]; // required for logger


#ifdef __cplusplus
	static constexpr uint8_t LOGGER_TYPE_FULL = 0;
	static constexpr uint8_t LOGGER_TYPE_MISSION = 1;
	static constexpr uint8_t BACKEND_FILE = 1;
	static constexpr uint8_t BACKEND_MAVLINK = 2;
	static constexpr uint8_t BACKEND_ALL = 3;

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using LoggerStatus = logger_status_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(logger_status);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const logger_status_s& message);
#endif
