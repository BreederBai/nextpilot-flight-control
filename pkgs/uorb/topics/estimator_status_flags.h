
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file D:\nextpilot\nextpilot-flight-control-public\msgs\uorb_msgs\EstimatorStatusFlags.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus

#endif


#ifdef __cplusplus
struct __EXPORT estimator_status_flags_s {
#else
struct estimator_status_flags_s {
#endif
	uint64_t timestamp;
	uint64_t timestamp_sample;
	uint32_t control_status_changes;
	uint32_t fault_status_changes;
	uint32_t innovation_fault_status_changes;
	bool cs_tilt_align;
	bool cs_yaw_align;
	bool cs_gps;
	bool cs_opt_flow;
	bool cs_mag_hdg;
	bool cs_mag_3d;
	bool cs_mag_dec;
	bool cs_in_air;
	bool cs_wind;
	bool cs_baro_hgt;
	bool cs_rng_hgt;
	bool cs_gps_hgt;
	bool cs_ev_pos;
	bool cs_ev_yaw;
	bool cs_ev_hgt;
	bool cs_fuse_beta;
	bool cs_mag_field_disturbed;
	bool cs_fixed_wing;
	bool cs_mag_fault;
	bool cs_fuse_aspd;
	bool cs_gnd_effect;
	bool cs_rng_stuck;
	bool cs_gps_yaw;
	bool cs_mag_aligned_in_flight;
	bool cs_ev_vel;
	bool cs_synthetic_mag_z;
	bool cs_vehicle_at_rest;
	bool cs_gps_yaw_fault;
	bool cs_rng_fault;
	bool cs_inertial_dead_reckoning;
	bool cs_wind_dead_reckoning;
	bool cs_rng_kin_consistent;
	bool cs_fake_pos;
	bool cs_fake_hgt;
	bool cs_gravity_vector;
	bool fs_bad_mag_x;
	bool fs_bad_mag_y;
	bool fs_bad_mag_z;
	bool fs_bad_hdg;
	bool fs_bad_mag_decl;
	bool fs_bad_airspeed;
	bool fs_bad_sideslip;
	bool fs_bad_optflow_x;
	bool fs_bad_optflow_y;
	bool fs_bad_vel_n;
	bool fs_bad_vel_e;
	bool fs_bad_vel_d;
	bool fs_bad_pos_n;
	bool fs_bad_pos_e;
	bool fs_bad_pos_d;
	bool fs_bad_acc_bias;
	bool fs_bad_acc_vertical;
	bool fs_bad_acc_clipping;
	bool reject_hor_vel;
	bool reject_ver_vel;
	bool reject_hor_pos;
	bool reject_ver_pos;
	bool reject_yaw;
	bool reject_airspeed;
	bool reject_sideslip;
	bool reject_hagl;
	bool reject_optflow_x;
	bool reject_optflow_y;
	uint8_t _padding0[5]; // required for logger


#ifdef __cplusplus

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using EstimatorStatusFlags = estimator_status_flags_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(estimator_status_flags);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const estimator_status_flags_s& message);
#endif
