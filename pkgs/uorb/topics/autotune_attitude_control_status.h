
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file AutotuneAttitudeControlStatus.msg */

#pragma once

#include <uORB.h>

#ifndef __cplusplus
#define AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_IDLE 0
#define AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_INIT 1
#define AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_ROLL 2
#define AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_ROLL_PAUSE 3
#define AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_PITCH 4
#define AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_PITCH_PAUSE 5
#define AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_YAW 6
#define AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_YAW_PAUSE 7
#define AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_VERIFICATION 8
#define AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_APPLY 9
#define AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_TEST 10
#define AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_COMPLETE 11
#define AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_FAIL 12
#define AUTOTUNE_ATTITUDE_CONTROL_STATUS_STATE_WAIT_FOR_DISARM 13
#endif // __cplusplus


#ifdef __cplusplus
struct __EXPORT autotune_attitude_control_status_s {
#else
struct autotune_attitude_control_status_s {
#endif // __cplusplus
	uint64_t timestamp;
	float coeff[5];
	float coeff_var[5];
	float fitness;
	float innov;
	float dt_model;
	float kc;
	float ki;
	float kd;
	float kff;
	float att_p;
	float rate_sp[3];
	float u_filt;
	float y_filt;
	uint8_t state;
	uint8_t _padding0[3]; // required for logger

#ifdef __cplusplus
	static constexpr uint8_t STATE_IDLE = 0;
	static constexpr uint8_t STATE_INIT = 1;
	static constexpr uint8_t STATE_ROLL = 2;
	static constexpr uint8_t STATE_ROLL_PAUSE = 3;
	static constexpr uint8_t STATE_PITCH = 4;
	static constexpr uint8_t STATE_PITCH_PAUSE = 5;
	static constexpr uint8_t STATE_YAW = 6;
	static constexpr uint8_t STATE_YAW_PAUSE = 7;
	static constexpr uint8_t STATE_VERIFICATION = 8;
	static constexpr uint8_t STATE_APPLY = 9;
	static constexpr uint8_t STATE_TEST = 10;
	static constexpr uint8_t STATE_COMPLETE = 11;
	static constexpr uint8_t STATE_FAIL = 12;
	static constexpr uint8_t STATE_WAIT_FOR_DISARM = 13;
#endif // __cplusplus
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using AutotuneAttitudeControlStatus = autotune_attitude_control_status_s;
	} // namespace msg
} // namespace nextpilot
#endif // __cplusplus

/* register this as object request broker structure */
ORB_DECLARE(autotune_attitude_control_status);

#ifdef __cplusplus
void print_message(const orb_metadata *meta, const autotune_attitude_control_status_s& message);
#endif // __cplusplus
