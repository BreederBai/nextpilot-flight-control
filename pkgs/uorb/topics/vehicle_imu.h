
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file VehicleImu.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus
#define VEHICLE_IMU_CLIPPING_X 1
#define VEHICLE_IMU_CLIPPING_Y 2
#define VEHICLE_IMU_CLIPPING_Z 4

#endif


#ifdef __cplusplus
struct __EXPORT vehicle_imu_s {
#else
struct vehicle_imu_s {
#endif
	uint64_t timestamp;
	uint64_t timestamp_sample;
	uint32_t accel_device_id;
	uint32_t gyro_device_id;
	float delta_angle[3];
	float delta_velocity[3];
	uint16_t delta_angle_dt;
	uint16_t delta_velocity_dt;
	uint8_t delta_angle_clipping;
	uint8_t delta_velocity_clipping;
	uint8_t accel_calibration_count;
	uint8_t gyro_calibration_count;


#ifdef __cplusplus
	static constexpr uint8_t CLIPPING_X = 1;
	static constexpr uint8_t CLIPPING_Y = 2;
	static constexpr uint8_t CLIPPING_Z = 4;

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using VehicleImu = vehicle_imu_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(vehicle_imu);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const vehicle_imu_s& message);
#endif
