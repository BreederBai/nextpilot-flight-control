
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file EstimatorEventFlags.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus

#endif


#ifdef __cplusplus
struct __EXPORT estimator_event_flags_s {
#else
struct estimator_event_flags_s {
#endif
	uint64_t timestamp;
	uint64_t timestamp_sample;
	uint32_t information_event_changes;
	uint32_t warning_event_changes;
	bool gps_checks_passed;
	bool reset_vel_to_gps;
	bool reset_vel_to_flow;
	bool reset_vel_to_vision;
	bool reset_vel_to_zero;
	bool reset_pos_to_last_known;
	bool reset_pos_to_gps;
	bool reset_pos_to_vision;
	bool starting_gps_fusion;
	bool starting_vision_pos_fusion;
	bool starting_vision_vel_fusion;
	bool starting_vision_yaw_fusion;
	bool yaw_aligned_to_imu_gps;
	bool reset_hgt_to_baro;
	bool reset_hgt_to_gps;
	bool reset_hgt_to_rng;
	bool reset_hgt_to_ev;
	bool gps_quality_poor;
	bool gps_fusion_timout;
	bool gps_data_stopped;
	bool gps_data_stopped_using_alternate;
	bool height_sensor_timeout;
	bool stopping_navigation;
	bool invalid_accel_bias_cov_reset;
	bool bad_yaw_using_gps_course;
	bool stopping_mag_use;
	bool vision_data_stopped;
	bool emergency_yaw_reset_mag_stopped;
	bool emergency_yaw_reset_gps_yaw_stopped;
	uint8_t _padding0[3]; // required for logger


#ifdef __cplusplus

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using EstimatorEventFlags = estimator_event_flags_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(estimator_event_flags);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const estimator_event_flags_s& message);
#endif
