
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file D:\nextpilot\nextpilot-flight-control-public\msgs\uorb_msgs\SystemPower.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus
#define SYSTEM_POWER_BRICK1_VALID_SHIFTS 0
#define SYSTEM_POWER_BRICK1_VALID_MASK 1
#define SYSTEM_POWER_BRICK2_VALID_SHIFTS 1
#define SYSTEM_POWER_BRICK2_VALID_MASK 2
#define SYSTEM_POWER_BRICK3_VALID_SHIFTS 2
#define SYSTEM_POWER_BRICK3_VALID_MASK 4
#define SYSTEM_POWER_BRICK4_VALID_SHIFTS 3
#define SYSTEM_POWER_BRICK4_VALID_MASK 8

#endif


#ifdef __cplusplus
struct __EXPORT system_power_s {
#else
struct system_power_s {
#endif
	uint64_t timestamp;
	float voltage5v_v;
	float sensors3v3[4];
	uint8_t sensors3v3_valid;
	uint8_t usb_connected;
	uint8_t brick_valid;
	uint8_t usb_valid;
	uint8_t servo_valid;
	uint8_t periph_5v_oc;
	uint8_t hipower_5v_oc;
	uint8_t comp_5v_valid;
	uint8_t can1_gps1_5v_valid;
	uint8_t _padding0[3]; // required for logger


#ifdef __cplusplus
	static constexpr uint8_t BRICK1_VALID_SHIFTS = 0;
	static constexpr uint8_t BRICK1_VALID_MASK = 1;
	static constexpr uint8_t BRICK2_VALID_SHIFTS = 1;
	static constexpr uint8_t BRICK2_VALID_MASK = 2;
	static constexpr uint8_t BRICK3_VALID_SHIFTS = 2;
	static constexpr uint8_t BRICK3_VALID_MASK = 4;
	static constexpr uint8_t BRICK4_VALID_SHIFTS = 3;
	static constexpr uint8_t BRICK4_VALID_MASK = 8;

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using SystemPower = system_power_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(system_power);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const system_power_s& message);
#endif
