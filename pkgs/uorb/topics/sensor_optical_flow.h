
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file D:\nextpilot\nextpilot-flight-control-public\msgs\uorb_msgs\SensorOpticalFlow.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus
#define SENSOR_OPTICAL_FLOW_MODE_UNKNOWN 0
#define SENSOR_OPTICAL_FLOW_MODE_BRIGHT 1
#define SENSOR_OPTICAL_FLOW_MODE_LOWLIGHT 2
#define SENSOR_OPTICAL_FLOW_MODE_SUPER_LOWLIGHT 3

#endif


#ifdef __cplusplus
struct __EXPORT sensor_optical_flow_s {
#else
struct sensor_optical_flow_s {
#endif
	uint64_t timestamp;
	uint64_t timestamp_sample;
	uint32_t device_id;
	float pixel_flow[2];
	float delta_angle[3];
	float distance_m;
	uint32_t integration_timespan_us;
	uint32_t error_count;
	float max_flow_rate;
	float min_ground_distance;
	float max_ground_distance;
	bool delta_angle_available;
	bool distance_available;
	uint8_t quality;
	uint8_t mode;
	uint8_t _padding0[4]; // required for logger


#ifdef __cplusplus
	static constexpr uint8_t MODE_UNKNOWN = 0;
	static constexpr uint8_t MODE_BRIGHT = 1;
	static constexpr uint8_t MODE_LOWLIGHT = 2;
	static constexpr uint8_t MODE_SUPER_LOWLIGHT = 3;

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using SensorOpticalFlow = sensor_optical_flow_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(sensor_optical_flow);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const sensor_optical_flow_s& message);
#endif
