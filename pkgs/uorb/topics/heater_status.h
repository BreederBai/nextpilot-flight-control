
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file HeaterStatus.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus
#define HEATER_STATUS_MODE_GPIO 1
#define HEATER_STATUS_MODE_PX4IO 2

#endif


#ifdef __cplusplus
struct __EXPORT heater_status_s {
#else
struct heater_status_s {
#endif
	uint64_t timestamp;
	uint32_t device_id;
	float temperature_sensor;
	float temperature_target;
	uint32_t controller_period_usec;
	uint32_t controller_time_on_usec;
	float proportional_value;
	float integrator_value;
	float feed_forward_value;
	bool heater_on;
	bool temperature_target_met;
	uint8_t mode;
	uint8_t _padding0[5]; // required for logger


#ifdef __cplusplus
	static constexpr uint8_t MODE_GPIO = 1;
	static constexpr uint8_t MODE_PX4IO = 2;

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using HeaterStatus = heater_status_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(heater_status);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const heater_status_s& message);
#endif
