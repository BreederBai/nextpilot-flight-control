
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file Px4ioStatus.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus

#endif


#ifdef __cplusplus
struct __EXPORT px4io_status_s {
#else
struct px4io_status_s {
#endif
	uint64_t timestamp;
	float voltage_v;
	float rssi_v;
	uint16_t free_memory_bytes;
	uint16_t pwm[8];
	uint16_t pwm_disarmed[8];
	uint16_t pwm_failsafe[8];
	uint16_t pwm_rate_hz[8];
	uint16_t raw_inputs[18];
	bool status_arm_sync;
	bool status_failsafe;
	bool status_fmu_initialized;
	bool status_fmu_ok;
	bool status_init_ok;
	bool status_outputs_armed;
	bool status_raw_pwm;
	bool status_rc_ok;
	bool status_rc_dsm;
	bool status_rc_ppm;
	bool status_rc_sbus;
	bool status_rc_st24;
	bool status_rc_sumd;
	bool status_safety_button_event;
	bool alarm_pwm_error;
	bool alarm_rc_lost;
	bool arming_failsafe_custom;
	bool arming_fmu_armed;
	bool arming_fmu_prearmed;
	bool arming_force_failsafe;
	bool arming_io_arm_ok;
	bool arming_lockdown;
	bool arming_termination_failsafe;
	uint8_t _padding0[3]; // required for logger


#ifdef __cplusplus

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using Px4ioStatus = px4io_status_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(px4io_status);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const px4io_status_s& message);
#endif
