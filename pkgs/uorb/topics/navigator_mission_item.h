
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file NavigatorMissionItem.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus

#endif


#ifdef __cplusplus
struct __EXPORT navigator_mission_item_s {
#else
struct navigator_mission_item_s {
#endif
	uint64_t timestamp;
	uint32_t instance_count;
	float latitude;
	float longitude;
	float time_inside;
	float acceptance_radius;
	float loiter_radius;
	float yaw;
	float altitude;
	uint16_t sequence_current;
	uint16_t nav_cmd;
	uint8_t frame;
	uint8_t origin;
	bool loiter_exit_xtrack;
	bool force_heading;
	bool altitude_is_relative;
	bool autocontinue;
	bool vtol_back_transition;
	uint8_t _padding0[5]; // required for logger


#ifdef __cplusplus

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using NavigatorMissionItem = navigator_mission_item_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(navigator_mission_item);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const navigator_mission_item_s& message);
#endif
