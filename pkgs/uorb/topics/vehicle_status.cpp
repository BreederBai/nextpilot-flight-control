
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file D:\nextpilot\nextpilot-flight-control-public\msgs\uorb_msgs\VehicleStatus.msg */


#include <rtdbg.h>
#include <inttypes.h>
//#include <px4_platform_common/log.h>
//#include <px4_platform_common/defines.h>
#include <topics/vehicle_status.h>
#include <topics/uORBTopics.hpp>
#include <hrtimer.h>
//#include <lib/drivers/device/Device.hpp>
//#include <lib/matrix/matrix/math.hpp>
//#include <lib/mathlib/mathlib.h>

constexpr char __orb_vehicle_status_fields[] = "\x89 timestamp;\x89 armed_time;\x89 takeoff_time;\x89 nav_state_timestamp;\x87 failure_detector_status;\x86 arming_state;\x86 latest_arming_reason;\x86 latest_disarming_reason;\x86 nav_state_user_intention;\x86 nav_state;\x86 hil_state;\x86 vehicle_type;\x8c failsafe;\x8c failsafe_and_user_took_over;\x8c gcs_connection_lost;\x86 gcs_connection_lost_counter;\x8c high_latency_data_link_lost;\x8c is_vtol;\x8c is_vtol_tailsitter;\x8c in_transition_mode;\x8c in_transition_to_fw;\x86 system_type;\x86 system_id;\x86 component_id;\x8c safety_button_available;\x8c safety_off;\x8c power_input_valid;\x8c usb_connected;\x8c open_drone_id_system_present;\x8c open_drone_id_system_healthy;\x8c parachute_system_present;\x8c parachute_system_healthy;\x8c avoidance_system_required;\x8c avoidance_system_valid;\x8c rc_calibration_in_progress;\x8c calibration_enabled;\x8c pre_flight_checks_pass;\x86[6] _padding0;";

ORB_DEFINE(vehicle_status, struct vehicle_status_s, 66, __orb_vehicle_status_fields, static_cast<uint8_t>(ORB_ID::vehicle_status));


void print_message(const orb_metadata *meta, const vehicle_status_s& message)
{
	if (sizeof(message) != meta->o_size) {
		LOG_RAW("unexpected message size for %s: %zu != %i\n", meta->o_name, sizeof(message), meta->o_size);
		return;
	}
	// orb_print_message_internal(meta, &message, true);
}
