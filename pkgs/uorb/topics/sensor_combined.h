
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file D:\nextpilot\nextpilot-flight-control-public\msgs\uorb_msgs\SensorCombined.msg */


#pragma once


#include <uORB.h>


#ifndef __cplusplus
#define SENSOR_COMBINED_RELATIVE_TIMESTAMP_INVALID 2147483647
#define SENSOR_COMBINED_CLIPPING_X 1
#define SENSOR_COMBINED_CLIPPING_Y 2
#define SENSOR_COMBINED_CLIPPING_Z 4

#endif


#ifdef __cplusplus
struct __EXPORT sensor_combined_s {
#else
struct sensor_combined_s {
#endif
	uint64_t timestamp;
	float gyro_rad[3];
	uint32_t gyro_integral_dt;
	int32_t accelerometer_timestamp_relative;
	float accelerometer_m_s2[3];
	uint32_t accelerometer_integral_dt;
	uint8_t accelerometer_clipping;
	uint8_t gyro_clipping;
	uint8_t accel_calibration_count;
	uint8_t gyro_calibration_count;


#ifdef __cplusplus
	static constexpr int32_t RELATIVE_TIMESTAMP_INVALID = 2147483647;
	static constexpr uint8_t CLIPPING_X = 1;
	static constexpr uint8_t CLIPPING_Y = 2;
	static constexpr uint8_t CLIPPING_Z = 4;

#endif
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using SensorCombined = sensor_combined_s;
	} // namespace msg
} // namespace nextpilot
#endif

/* register this as object request broker structure */
ORB_DECLARE(sensor_combined);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const sensor_combined_s& message);
#endif
