
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file DistanceSensor.msg */

#pragma once

#include <uORB.h>

#ifndef __cplusplus
#define DISTANCE_SENSOR_MAV_DISTANCE_SENSOR_LASER 0
#define DISTANCE_SENSOR_MAV_DISTANCE_SENSOR_ULTRASOUND 1
#define DISTANCE_SENSOR_MAV_DISTANCE_SENSOR_INFRARED 2
#define DISTANCE_SENSOR_MAV_DISTANCE_SENSOR_RADAR 3
#define DISTANCE_SENSOR_ROTATION_YAW_0 0
#define DISTANCE_SENSOR_ROTATION_YAW_45 1
#define DISTANCE_SENSOR_ROTATION_YAW_90 2
#define DISTANCE_SENSOR_ROTATION_YAW_135 3
#define DISTANCE_SENSOR_ROTATION_YAW_180 4
#define DISTANCE_SENSOR_ROTATION_YAW_225 5
#define DISTANCE_SENSOR_ROTATION_YAW_270 6
#define DISTANCE_SENSOR_ROTATION_YAW_315 7
#define DISTANCE_SENSOR_ROTATION_FORWARD_FACING 0
#define DISTANCE_SENSOR_ROTATION_RIGHT_FACING 2
#define DISTANCE_SENSOR_ROTATION_BACKWARD_FACING 4
#define DISTANCE_SENSOR_ROTATION_LEFT_FACING 6
#define DISTANCE_SENSOR_ROTATION_UPWARD_FACING 24
#define DISTANCE_SENSOR_ROTATION_DOWNWARD_FACING 25
#define DISTANCE_SENSOR_ROTATION_CUSTOM 100
#endif // __cplusplus


#ifdef __cplusplus
struct __EXPORT distance_sensor_s {
#else
struct distance_sensor_s {
#endif // __cplusplus
	uint64_t timestamp;
	uint32_t device_id;
	float min_distance;
	float max_distance;
	float current_distance;
	float variance;
	float h_fov;
	float v_fov;
	float q[4];
	int8_t signal_quality;
	uint8_t type;
	uint8_t orientation;
	uint8_t _padding0[1]; // required for logger

#ifdef __cplusplus
	static constexpr uint8_t MAV_DISTANCE_SENSOR_LASER = 0;
	static constexpr uint8_t MAV_DISTANCE_SENSOR_ULTRASOUND = 1;
	static constexpr uint8_t MAV_DISTANCE_SENSOR_INFRARED = 2;
	static constexpr uint8_t MAV_DISTANCE_SENSOR_RADAR = 3;
	static constexpr uint8_t ROTATION_YAW_0 = 0;
	static constexpr uint8_t ROTATION_YAW_45 = 1;
	static constexpr uint8_t ROTATION_YAW_90 = 2;
	static constexpr uint8_t ROTATION_YAW_135 = 3;
	static constexpr uint8_t ROTATION_YAW_180 = 4;
	static constexpr uint8_t ROTATION_YAW_225 = 5;
	static constexpr uint8_t ROTATION_YAW_270 = 6;
	static constexpr uint8_t ROTATION_YAW_315 = 7;
	static constexpr uint8_t ROTATION_FORWARD_FACING = 0;
	static constexpr uint8_t ROTATION_RIGHT_FACING = 2;
	static constexpr uint8_t ROTATION_BACKWARD_FACING = 4;
	static constexpr uint8_t ROTATION_LEFT_FACING = 6;
	static constexpr uint8_t ROTATION_UPWARD_FACING = 24;
	static constexpr uint8_t ROTATION_DOWNWARD_FACING = 25;
	static constexpr uint8_t ROTATION_CUSTOM = 100;
#endif // __cplusplus
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using DistanceSensor = distance_sensor_s;
	} // namespace msg
} // namespace nextpilot
#endif // __cplusplus

/* register this as object request broker structure */
ORB_DECLARE(distance_sensor);

#ifdef __cplusplus
void print_message(const orb_metadata *meta, const distance_sensor_s& message);
#endif // __cplusplus
