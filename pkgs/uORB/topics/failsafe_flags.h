
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file FailsafeFlags.msg */

#pragma once

#include <uORB.h>

#ifndef __cplusplus
#endif // __cplusplus


#ifdef __cplusplus
struct __EXPORT failsafe_flags_s {
#else
struct failsafe_flags_s {
#endif // __cplusplus
	uint64_t timestamp;
	uint32_t mode_req_angular_velocity;
	uint32_t mode_req_attitude;
	uint32_t mode_req_local_alt;
	uint32_t mode_req_local_position;
	uint32_t mode_req_local_position_relaxed;
	uint32_t mode_req_global_position;
	uint32_t mode_req_mission;
	uint32_t mode_req_offboard_signal;
	uint32_t mode_req_home_position;
	uint32_t mode_req_wind_and_flight_time_compliance;
	uint32_t mode_req_prevent_arming;
	uint32_t mode_req_manual_control;
	uint32_t mode_req_other;
	bool angular_velocity_invalid;
	bool attitude_invalid;
	bool local_altitude_invalid;
	bool local_position_invalid;
	bool local_position_invalid_relaxed;
	bool local_velocity_invalid;
	bool global_position_invalid;
	bool auto_mission_missing;
	bool offboard_control_signal_lost;
	bool home_position_invalid;
	bool manual_control_signal_lost;
	bool gcs_connection_lost;
	uint8_t battery_warning;
	bool battery_low_remaining_time;
	bool battery_unhealthy;
	bool primary_geofence_breached;
	bool mission_failure;
	bool vtol_fixed_wing_system_failure;
	bool wind_limit_exceeded;
	bool flight_time_limit_exceeded;
	bool local_position_accuracy_low;
	bool fd_critical_failure;
	bool fd_esc_arming_failure;
	bool fd_imbalanced_prop;
	bool fd_motor_failure;
	uint8_t _padding0[3]; // required for logger

#ifdef __cplusplus
#endif // __cplusplus
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using FailsafeFlags = failsafe_flags_s;
	} // namespace msg
} // namespace nextpilot
#endif // __cplusplus

/* register this as object request broker structure */
ORB_DECLARE(failsafe_flags);

#ifdef __cplusplus
void print_message(const orb_metadata *meta, const failsafe_flags_s& message);
#endif // __cplusplus
