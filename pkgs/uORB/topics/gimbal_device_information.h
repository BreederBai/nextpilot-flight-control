
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file GimbalDeviceInformation.msg */

#pragma once

#include <uORB.h>

#ifndef __cplusplus
#define GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT 1
#define GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL 2
#define GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS 4
#define GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW 8
#define GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK 16
#define GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS 32
#define GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW 64
#define GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK 128
#define GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS 256
#define GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW 512
#define GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK 1024
#define GIMBAL_DEVICE_INFORMATION_GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW 2048
#endif // __cplusplus


#ifdef __cplusplus
struct __EXPORT gimbal_device_information_s {
#else
struct gimbal_device_information_s {
#endif // __cplusplus
	uint64_t timestamp;
	uint64_t uid;
	uint32_t firmware_version;
	uint32_t hardware_version;
	float roll_min;
	float roll_max;
	float pitch_min;
	float pitch_max;
	float yaw_min;
	float yaw_max;
	uint16_t cap_flags;
	uint16_t custom_cap_flags;
	uint8_t vendor_name[32];
	uint8_t model_name[32];
	uint8_t custom_name[32];
	uint8_t gimbal_device_compid;
	uint8_t _padding0[3]; // required for logger

#ifdef __cplusplus
	static constexpr uint32_t GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT = 1;
	static constexpr uint32_t GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL = 2;
	static constexpr uint32_t GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS = 4;
	static constexpr uint32_t GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW = 8;
	static constexpr uint32_t GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK = 16;
	static constexpr uint32_t GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS = 32;
	static constexpr uint32_t GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW = 64;
	static constexpr uint32_t GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK = 128;
	static constexpr uint32_t GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS = 256;
	static constexpr uint32_t GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW = 512;
	static constexpr uint32_t GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK = 1024;
	static constexpr uint32_t GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW = 2048;
#endif // __cplusplus
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using GimbalDeviceInformation = gimbal_device_information_s;
	} // namespace msg
} // namespace nextpilot
#endif // __cplusplus

/* register this as object request broker structure */
ORB_DECLARE(gimbal_device_information);

#ifdef __cplusplus
void print_message(const orb_metadata *meta, const gimbal_device_information_s& message);
#endif // __cplusplus
