
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file EstimatorInnovations.msg */

#pragma once

#include <uORB.h>

#ifndef __cplusplus
#endif // __cplusplus


#ifdef __cplusplus
struct __EXPORT estimator_innovations_s {
#else
struct estimator_innovations_s {
#endif // __cplusplus
	uint64_t timestamp;
	uint64_t timestamp_sample;
	float gps_hvel[2];
	float gps_vvel;
	float gps_hpos[2];
	float gps_vpos;
	float ev_hvel[2];
	float ev_vvel;
	float ev_hpos[2];
	float ev_vpos;
	float rng_vpos;
	float baro_vpos;
	float aux_hvel[2];
	float aux_vvel;
	float flow[2];
	float terr_flow[2];
	float heading;
	float mag_field[3];
	float gravity[3];
	float drag[2];
	float airspeed;
	float beta;
	float hagl;
	float hagl_rate;

#ifdef __cplusplus
#endif // __cplusplus
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using EstimatorInnovations = estimator_innovations_s;
	} // namespace msg
} // namespace nextpilot
#endif // __cplusplus

/* register this as object request broker structure */
ORB_DECLARE(estimator_innovations);
ORB_DECLARE(estimator_innovation_variances);
ORB_DECLARE(estimator_innovation_test_ratios);

#ifdef __cplusplus
void print_message(const orb_metadata *meta, const estimator_innovations_s& message);
#endif // __cplusplus
