
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file TelemetryStatus.msg */

#pragma once

#include <uORB.h>

#ifndef __cplusplus
#define TELEMETRY_STATUS_LINK_TYPE_GENERIC 0
#define TELEMETRY_STATUS_LINK_TYPE_UBIQUITY_BULLET 1
#define TELEMETRY_STATUS_LINK_TYPE_WIRE 2
#define TELEMETRY_STATUS_LINK_TYPE_USB 3
#define TELEMETRY_STATUS_LINK_TYPE_IRIDIUM 4
#define TELEMETRY_STATUS_HEARTBEAT_TIMEOUT_US 2500000
#endif // __cplusplus


#ifdef __cplusplus
struct __EXPORT telemetry_status_s {
#else
struct telemetry_status_s {
#endif // __cplusplus
	uint64_t timestamp;
	float data_rate;
	float rate_multiplier;
	float tx_rate_avg;
	float tx_error_rate_avg;
	uint32_t tx_message_count;
	uint32_t tx_buffer_overruns;
	float rx_rate_avg;
	uint32_t rx_message_count;
	uint32_t rx_message_lost_count;
	uint32_t rx_buffer_overruns;
	uint32_t rx_parse_errors;
	uint32_t rx_packet_drop_count;
	float rx_message_lost_rate;
	uint8_t type;
	uint8_t mode;
	bool flow_control;
	bool forwarding;
	bool mavlink_v2;
	bool ftp;
	uint8_t streams;
	bool heartbeat_type_antenna_tracker;
	bool heartbeat_type_gcs;
	bool heartbeat_type_onboard_controller;
	bool heartbeat_type_gimbal;
	bool heartbeat_type_adsb;
	bool heartbeat_type_camera;
	bool heartbeat_type_parachute;
	bool heartbeat_type_open_drone_id;
	bool heartbeat_component_telemetry_radio;
	bool heartbeat_component_log;
	bool heartbeat_component_osd;
	bool heartbeat_component_obstacle_avoidance;
	bool heartbeat_component_vio;
	bool heartbeat_component_pairing_manager;
	bool heartbeat_component_udp_bridge;
	bool heartbeat_component_uart_bridge;
	bool avoidance_system_healthy;
	bool open_drone_id_system_healthy;
	bool parachute_system_healthy;
	uint8_t _padding0[2]; // required for logger

#ifdef __cplusplus
	static constexpr uint8_t LINK_TYPE_GENERIC = 0;
	static constexpr uint8_t LINK_TYPE_UBIQUITY_BULLET = 1;
	static constexpr uint8_t LINK_TYPE_WIRE = 2;
	static constexpr uint8_t LINK_TYPE_USB = 3;
	static constexpr uint8_t LINK_TYPE_IRIDIUM = 4;
	static constexpr uint64_t HEARTBEAT_TIMEOUT_US = 2500000;
#endif // __cplusplus
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using TelemetryStatus = telemetry_status_s;
	} // namespace msg
} // namespace nextpilot
#endif // __cplusplus

/* register this as object request broker structure */
ORB_DECLARE(telemetry_status);

#ifdef __cplusplus
void print_message(const orb_metadata *meta, const telemetry_status_s& message);
#endif // __cplusplus
