
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file ControlAllocatorStatus.msg */

#pragma once

#include <uORB.h>

#ifndef __cplusplus
#define CONTROL_ALLOCATOR_STATUS_ACTUATOR_SATURATION_OK 0
#define CONTROL_ALLOCATOR_STATUS_ACTUATOR_SATURATION_UPPER_DYN 1
#define CONTROL_ALLOCATOR_STATUS_ACTUATOR_SATURATION_UPPER 2
#define CONTROL_ALLOCATOR_STATUS_ACTUATOR_SATURATION_LOWER_DYN -1
#define CONTROL_ALLOCATOR_STATUS_ACTUATOR_SATURATION_LOWER -2
#endif // __cplusplus


#ifdef __cplusplus
struct __EXPORT control_allocator_status_s {
#else
struct control_allocator_status_s {
#endif // __cplusplus
	uint64_t timestamp;
	float unallocated_torque[3];
	float unallocated_thrust[3];
	uint16_t handled_motor_failure_mask;
	bool torque_setpoint_achieved;
	bool thrust_setpoint_achieved;
	int8_t actuator_saturation[16];
	uint8_t _padding0[4]; // required for logger

#ifdef __cplusplus
	static constexpr int8_t ACTUATOR_SATURATION_OK = 0;
	static constexpr int8_t ACTUATOR_SATURATION_UPPER_DYN = 1;
	static constexpr int8_t ACTUATOR_SATURATION_UPPER = 2;
	static constexpr int8_t ACTUATOR_SATURATION_LOWER_DYN = -1;
	static constexpr int8_t ACTUATOR_SATURATION_LOWER = -2;
#endif // __cplusplus
};

#ifdef __cplusplus
namespace nextpilot {
	namespace msg {
		using ControlAllocatorStatus = control_allocator_status_s;
	} // namespace msg
} // namespace nextpilot
#endif // __cplusplus

/* register this as object request broker structure */
ORB_DECLARE(control_allocator_status);

#ifdef __cplusplus
void print_message(const orb_metadata *meta, const control_allocator_status_s& message);
#endif // __cplusplus
