
/*****************************************************************
 *     _   __             __   ____   _  __        __
 *    / | / /___   _  __ / /_ / __ \ (_)/ /____   / /_
 *   /  |/ // _ \ | |/_// __// /_/ // // // __ \ / __/
 *  / /|  //  __/_>  < / /_ / ____// // // /_/ // /_
 * /_/ |_/ \___//_/|_| \__//_/    /_//_/ \____/ \__/
 *
 * Copyright All Reserved Â© 2015-2024 NextPilot Development Team
 ******************************************************************/

/* Auto-generated by genmsg_cpp from file EstimatorAidSource2d.msg */


#include <rtdbg.h>
#include <inttypes.h>
#include <hrtimer.h>
#include <topics/uORBTopics.hpp>
#include <topics/estimator_aid_source2d.h>

constexpr char __orb_estimator_aid_source2d_fields[] = "\x89 timestamp;\x89 timestamp_sample;\x89 time_last_fuse;\x88 device_id;\x8a[2] observation;\x8a[2] observation_variance;\x8a[2] innovation;\x8a[2] innovation_variance;\x8a[2] test_ratio;\x86 estimator_instance;\x8c fusion_enabled;\x8c innovation_rejected;\x8c fused;";

ORB_DEFINE(estimator_aid_src_ev_pos, struct estimator_aid_source2d_s, 72, __orb_estimator_aid_source2d_fields, static_cast<uint8_t>(ORB_ID::estimator_aid_src_ev_pos));
ORB_DEFINE(estimator_aid_src_fake_pos, struct estimator_aid_source2d_s, 72, __orb_estimator_aid_source2d_fields, static_cast<uint8_t>(ORB_ID::estimator_aid_src_fake_pos));
ORB_DEFINE(estimator_aid_src_gnss_pos, struct estimator_aid_source2d_s, 72, __orb_estimator_aid_source2d_fields, static_cast<uint8_t>(ORB_ID::estimator_aid_src_gnss_pos));
ORB_DEFINE(estimator_aid_src_aux_vel, struct estimator_aid_source2d_s, 72, __orb_estimator_aid_source2d_fields, static_cast<uint8_t>(ORB_ID::estimator_aid_src_aux_vel));
ORB_DEFINE(estimator_aid_src_optical_flow, struct estimator_aid_source2d_s, 72, __orb_estimator_aid_source2d_fields, static_cast<uint8_t>(ORB_ID::estimator_aid_src_optical_flow));
ORB_DEFINE(estimator_aid_src_terrain_optical_flow, struct estimator_aid_source2d_s, 72, __orb_estimator_aid_source2d_fields, static_cast<uint8_t>(ORB_ID::estimator_aid_src_terrain_optical_flow));


void print_message(const orb_metadata *meta, const estimator_aid_source2d_s& message)
{
	if (sizeof(message) != meta->o_size) {
		LOG_RAW("unexpected message size for %s: %zu != %i\n", meta->o_name, sizeof(message), meta->o_size);
		return;
	}
	// orb_print_message_internal(meta, &message, true);
}
